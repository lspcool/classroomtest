# frozen_string_literal: true

# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

require "simplecov"

SimpleCov.start "rails"

RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed

  # These two settings work together to allow you to limit a spec run
  # to individual examples or groups you care about by tagging them with
  # `:focus` metadata. When nothing is tagged with `:focus`, all examples
  # get run.
  config.filter_run :focus
  config.run_all_when_everything_filtered = true

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = "spec/examples.txt"

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = "doc"
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  config.profile_examples = 10

  def json_payload(file_path)
    JSON.parse(file_fixture(file_path).read)
  end
end

def stub_octokit_client
  @octokit_client ||= begin
    @octokit_client = instance_double("Octokit::Client")
    allow(Octokit::Client).to receive(:new).and_return(@octokit_client)
    allow(@octokit_client).to receive(:access_token).and_return(1234)
    @octokit_client
  end
end

def stub_user_request(user_id)
  headers = { headers: { "Cache-Control" => "no-cache, no-store" } }
  allow(stub_octokit_client).to receive(:user).with(user_id, headers)
end

def stub_org_request(org_id)
  org_response = OpenStruct.new(login: "fake org")
  allow(stub_octokit_client).to receive(:organization).with(org_id, {}).and_return(org_response)
end

def stub_check_org_membership_request(org_id, user_login)
  allow(stub_octokit_client).to receive(:organization_member?).with(org_id, user_login)
end

def stub_update_org_membership_request(org_login, other_args = {})
  allow(stub_octokit_client).to receive(:update_organization_membership).with(org_login, other_args)
end

def stub_repo_request(repo_id, other_args = {}, repo_response = {})
  fake_name = Faker::Company.name
  repo_response = repo_response.merge(name: fake_name, full_name: fake_name)
  repo_response = OpenStruct.new(repo_response)
  allow(stub_octokit_client).to receive(:repository).with(repo_id, other_args).and_return(repo_response)
end

def stub_repo_contents_request(repo_id, repo_response = {})
  allow(stub_octokit_client).to receive(:contents).with(repo_id).and_return(repo_response)
end

def stub_repo_contributors_stats_request(repo_name, total_commits)
  allow(stub_octokit_client).to receive(:contributors_stats).with(repo_name, retry_timeout: 2).and_return(["total" => total_commits])
end

def stub_repo_default_branch_request(repo_name)
  repo_response = OpenStruct.new(default_branch: "master")
  allow(stub_octokit_client).to receive(:repository).with(repo_name).and_return(repo_response)
end

def stub_delete_repo_request(repo_id)
  allow(stub_octokit_client).to receive(:delete_repository).with(repo_id)
end

def stub_create_team_request(org_id, team_name, team_id)
  team_description = "#{team_name} created by GitHub Classroom"
  team_response = OpenStruct.new(id: team_id)
  allow(stub_octokit_client).to receive(:create_team).with(org_id, name: team_name, description: team_description).and_return(team_response)
end

def stub_team_request(team_id)
  allow(stub_octokit_client).to receive(:team).with(team_id, {})
end

def stub_create_team(organization, team_id)
  stub_org_request(organization.github_id)
  team_name = Faker::Team.name[0..39]
  stub_create_team_request(organization.github_id, team_name, team_id)
  stub_team_request(team_id)
  organization.github_organization.create_team(team_name)
end

def stub_create_team_membership_request(team_id, user_login)
  allow(stub_octokit_client).to receive(:add_team_membership).with(team_id, user_login)
end
